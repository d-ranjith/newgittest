- src
  - main
    - java
      - com
        - yourcompany
          - app
            - config
              - AppConfiguration.java
            - model
              - FormData.java
              - OAuthToken.java
            - service
              - ArtifactoryService.java
              - OAuthService.java
              - ApiService.java
            - App.java
        - exception
          - CustomExceptionMapper.java
        - util
          - ArchiveExtractor.java
    - resources
      - application.properties
  - test
    - java
      - com
        - yourcompany
          - app
            - service
              - ArtifactoryServiceTest.java
              - OAuthServiceTest.java
              - ApiServiceTest.java
    - resources
      - application.properties



resources.properties

# Application Configuration
app.api.endpoint=https://api.example.com
app.artifactory.username=${ARTIFACTORY_USERNAME}
app.artifactory.apikey=${ARTIFACTORY_API_KEY}
app.artifactory.certificate.path=${ARTIFACTORY_CERTIFICATE_PATH}
app.oauth.client.id=${OAUTH_CLIENT_ID}
app.oauth.client.secret=${OAUTH_CLIENT_SECRET}

# Logging Configuration
log.debug.level=INFO
log.verbosity=LOW
log.pattern=%d{yyyy-MM-dd HH:mm:ss} %-5p [%c{1}] %m%n
log.console.color=true

# Quarkus Configuration
quarkus.http.port=8080
quarkus.smallrye-jwt.enabled=true


----- unit tests

ArtifactoryServiceTest.java:

java
Copy code
package com.yourcompany.app.service;

import com.yourcompany.app.config.AppConfiguration;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.mockito.Mockito.*;

class ArtifactoryServiceTest {

    @Mock
    private AppConfiguration appConfiguration;

    @InjectMocks
    private ArtifactoryService artifactoryService;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testDownloadFileFromArtifactory() {
        // Mock the required dependencies
        String username = "testUser";
        String apiKey = "testApiKey";
        String certificatePath = "testCertificatePath";
        when(appConfiguration.getArtifactoryUsername()).thenReturn(username);
        when(appConfiguration.getArtifactoryApiKey()).thenReturn(apiKey);
        when(appConfiguration.getArtifactoryCertificatePath()).thenReturn(certificatePath);

        // Add your test logic here to verify the behavior of the downloadFileFromArtifactory method
    }

    @Test
    void testGetFileSize() {
        // Mock the required dependencies

        // Add your test logic here to verify the behavior of the getFileSize method
    }
}
OAuthServiceTest.java:

java
Copy code
package com.yourcompany.app.service;

import com.yourcompany.app.config.AppConfiguration;
import com.yourcompany.app.model.OAuthToken;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.mockito.Mockito.*;

class OAuthServiceTest {

    @Mock
    private AppConfiguration appConfiguration;

    @InjectMocks
    private OAuthService oauthService;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testFetchAccessToken() {
        // Mock the required dependencies
        String clientId = "testClientId";
        String clientSecret = "testClientSecret";
        when(appConfiguration.getOauthClientId()).thenReturn(clientId);
        when(appConfiguration.getOauthClientSecret()).thenReturn(clientSecret);

        // Add your test logic here to verify the behavior of the fetchAccessToken method
    }
}
ApiServiceTest.java:

java
Copy code
package com.yourcompany.app.service;

import com.yourcompany.app.config.AppConfiguration;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.mockito.Mockito.*;

class ApiServiceTest {

    @Mock
    private AppConfiguration appConfiguration;

    @InjectMocks
    private ApiService apiService;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testUploadPayload() {
        // Mock the required dependencies
        String apiEndpoint = "testApiEndpoint";
        when(appConfiguration.getApiEndpoint()).thenReturn(apiEndpoint);

        // Add your test logic here to verify the behavior of the uploadPayload method
    }
}


---------------------------------

package com.yourcompany.app;

import com.yourcompany.app.config.AppConfiguration;
import com.yourcompany.app.model.FormData;
import com.yourcompany.app.model.OAuthToken;
import com.yourcompany.app.service.ArtifactoryService;
import com.yourcompany.app.service.OAuthService;
import com.yourcompany.app.service.ApiService;
import com.yourcompany.app.util.ArchiveExtractor;
import com.yourcompany.app.logger.Logger;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.util.Map;

@Singleton
public class App {

    @Inject
    AppConfiguration appConfiguration;

    @Inject
    ArtifactoryService artifactoryService;

    @Inject
    OAuthService oauthService;

    @Inject
    ApiService apiService;

    @Inject
    ArchiveExtractor archiveExtractor;

    public static void main(String[] args) {
        App app = new App();
        app.run();
    }

    public void run() {
        // Read the required configuration values from appConfiguration
        String apiEndpoint = appConfiguration.getApiEndpoint();
        String artifactoryUsername = appConfiguration.getArtifactoryUsername();
        String artifactoryApiKey = appConfiguration.getArtifactoryApiKey();
        String artifactoryCertificatePath = appConfiguration.getArtifactoryCertificatePath();
        String oauthClientId = appConfiguration.getOauthClientId();
        String oauthClientSecret = appConfiguration.getOauthClientSecret();

        // Download the file from Artifactory using artifactoryService
        artifactoryService.downloadFileFromArtifactory(artifactoryUsername, artifactoryApiKey, artifactoryCertificatePath);

        // Get the file size using artifactoryService
        String fileSizePath = System.getenv("FILE_SIZE_PATH");
        long fileSize = artifactoryService.getFileSize(fileSizePath);

        // Fetch the OAuth token using oauthService
        OAuthToken token = oauthService.fetchOAuthToken(oauthClientId, oauthClientSecret);

        // Upload the payload to the API endpoint using apiService
        String payload = "{\"key\":\"value\"}";
        apiService.uploadPayload(payload, apiEndpoint);

        // Extract and show contents using archiveExtractor
        String extractPath = System.getenv("EXTRACT_PATH");
        archiveExtractor.extractContents(extractPath);

        // Log message
        logMessage("Execution completed", "DEBUG", "HIGH");
    }

    private void logMessage(String message, String level, String verbosity) {
        String module = "your-module"; // Replace with your actual module name
        Logger.logMessage(message, level, verbosity, module);
    }
}




AppConfiguration.java:

package com.yourcompany.app.config;

import lombok.Getter;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;

@ApplicationScoped
@Getter
public class AppConfiguration {

    @Inject
    @ConfigProperty(name = "app.api.endpoint")
    private String apiEndpoint;

    @Inject
    @ConfigProperty(name = "app.artifactory.username")
    private String artifactoryUsername;

    @Inject
    @ConfigProperty(name = "app.artifactory.apikey")
    private String artifactoryApiKey;

    @Inject
    @ConfigProperty(name = "app.artifactory.certificate.path")
    private String artifactoryCertificatePath;

    @Inject
    @ConfigProperty(name = "app.oauth.client.id")
    private String oauthClientId;

    @Inject
    @ConfigProperty(name = "app.oauth.client.secret")
    private String oauthClientSecret;
}




FormData.java:

java
Copy code
package com.yourcompany.app.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class FormData {
    private String name;
    private String value;
}
OAuthToken.java:

java
Copy code
package com.yourcompany.app.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class OAuthToken {
    private String accessToken;
    private String tokenType;
    private int expiresIn;
}

ArtifactoryService.java:

package com.yourcompany.app.service;

import com.yourcompany.app.config.AppConfiguration;
import com.yourcompany.app.logger.Logger;
import lombok.extern.slf4j.Slf4j;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLParameters;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Invocation;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;

@ApplicationScoped
@Slf4j
public class ArtifactoryService {

    @Inject
    AppConfiguration appConfiguration;

    public void downloadFileFromArtifactory() {
        String username = System.getenv("ARTIFACTORY_USERNAME");
        String apiKey = System.getenv("ARTIFACTORY_API_KEY");
        String certificatePath = System.getenv("ARTIFACTORY_CERTIFICATE_PATH");

        String artifactoryUrl;
        if ("DEV".equalsIgnoreCase(System.getenv("ENVIRONMENT"))) {
            artifactoryUrl = appConfiguration.getDevArtifactoryUrl();
        } else {
            artifactoryUrl = appConfiguration.getProdArtifactoryUrl();
        }

        // Create the REST client with SSLContext
        Client client = createSSLClient(certificatePath);

        try {
            // Build the Artifactory API URL
            String apiUrl = artifactoryUrl + "/path/to/file";

            // Send a GET request to the Artifactory API
            Invocation.Builder builder = client.target(apiUrl)
                    .request(MediaType.APPLICATION_OCTET_STREAM)
                    .header("X-JFrog-Art-Api", apiKey)
                    .header("Authorization", "Bearer " + getAuthToken(username, apiKey));

            Response response = builder.get();

            // Check if the request was successful
            if (response.getStatus() == Response.Status.OK.getStatusCode()) {
                // Get the input stream from the response
                InputStream inputStream = response.readEntity(InputStream.class);

                // Create the output file
                String outputFile = "path/to/output/file";
                OutputStream outputStream = new FileOutputStream(outputFile);

                // Copy the input stream to the output file
                byte[] buffer = new byte[4096];
                int bytesRead;
                while ((bytesRead = inputStream.read(buffer)) != -1) {
                    outputStream.write(buffer, 0, bytesRead);
                }

                // Close the input and output streams
                inputStream.close();
                outputStream.close();

                Logger.logMessage("File downloaded from Artifactory", "INFO", "HIGH", "ArtifactoryService");
            } else {
                Logger.logMessage("Failed to download file from Artifactory: " + response.getStatusInfo().getReasonPhrase(), "ERROR", "HIGH", "ArtifactoryService");
            }
        } catch (IOException e) {
            Logger.logMessage("Error occurred while downloading file from Artifactory", "ERROR", "HIGH", "ArtifactoryService");
            log.error("Error occurred while downloading file from Artifactory", e);
        } finally {
            // Close the REST client
            client.close();
        }
    }

    private String getAuthToken(String username, String apiKey) {
        // Implement the logic to fetch the authentication token from JFrog Artifactory
        // This may involve making a request to a specific endpoint and using the provided username and API key

        // Example implementation with basic authentication
        // Replace the endpoint and implementation logic based on your specific authentication method

        String authEndpoint = "https://artifactory.example.com/api/auth";

        // Create the REST client
        Client client = ClientBuilder.newClient();

        try {
            // Build the authentication API URL
            String apiUrl = authEndpoint + "?username=" + username + "&apiKey=" + apiKey;

            // Send a GET request to the authentication API
            Response response = client.target(apiUrl)
                    .request(MediaType.APPLICATION_JSON)
                    .get();

            // Check if the request was successful
            if (response.getStatus() == Response.Status.OK.getStatusCode()) {
                // Parse the response and extract the authentication token
                JsonObject jsonResponse = response.readEntity(JsonObject.class);
                String authToken = jsonResponse.getString("token");

                Logger.logMessage("Authentication token fetched successfully", "INFO", "HIGH", "ArtifactoryService");

                return authToken;
            } else {
                Logger.logMessage("Failed to fetch authentication token: " + response.getStatusInfo().getReasonPhrase(), "ERROR", "HIGH", "ArtifactoryService");
            }
        } catch (Exception e) {
            Logger.logMessage("Error occurred while fetching authentication token", "ERROR", "HIGH", "ArtifactoryService");
            log.error("Error occurred while fetching authentication token", e);
        } finally {
            // Close the REST client
            client.close();
        }

        return ""; // Return an empty string if the token couldn't be fetched
    }

    private Client createSSLClient(String certificatePath) {
        try {
            KeyStore keyStore = KeyStore.getInstance("PKCS12");
            keyStore.load(getClass().getClassLoader().getResourceAsStream(certificatePath), "password".toCharArray());

            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, null, null);
            SSLParameters sslParameters = sslContext.getDefaultSSLParameters();
            sslParameters.setNeedClientAuth(true);
            sslParameters.setKeyStore(keyStore);

            return ClientBuilder.newBuilder()
                    .sslContext(sslContext)
                    .sslParameters(sslParameters)
                    .build();
        } catch (IOException | GeneralSecurityException e) {
            Logger.logMessage("Error occurred while creating SSL client", "ERROR", "HIGH", "ArtifactoryService");
            log.error("Error occurred while creating SSL client", e);
            return null;
        }
    }
}





OAuthService.java:

package com.yourcompany.app.service;

import com.yourcompany.app.config.AppConfiguration;
import com.yourcompany.app.model.OAuthToken;
import lombok.extern.slf4j.Slf4j;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.core.Form;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

@ApplicationScoped
@Slf4j
public class OAuthService {

    @Inject
    AppConfiguration appConfiguration;

    public OAuthToken fetchAccessToken(String clientId, String clientSecret) {
        String tokenEndpoint = appConfiguration.getOAuthTokenEndpoint();

        // Create the REST client
        Client client = ClientBuilder.newClient();

        try {
            // Build the token endpoint URL
            String apiUrl = tokenEndpoint;

            // Create the form data for the request
            Form form = new Form();
            form.param("grant_type", "client_credentials");
            form.param("client_id", clientId);
            form.param("client_secret", clientSecret);

            // Send a POST request to the token endpoint
            Response response = client.target(apiUrl)
                    .request(MediaType.APPLICATION_JSON)
                    .post(Entity.form(form));

            // Check if the request was successful
            if (response.getStatus() == Response.Status.OK.getStatusCode()) {
                // Parse the response and extract the access token
                OAuthToken token = response.readEntity(OAuthToken.class);
                log.info("Access token fetched successfully");
                return token;
            } else {
                log.error("Failed to fetch access token: {}", response.getStatusInfo().getReasonPhrase());
            }
        } catch (Exception e) {
            log.error("Error occurred while fetching access token", e);
        } finally {
            // Close the REST client
            client.close();
        }

        return null; // Return null if the token couldn't be fetched
    }
}


ApiService.java:

package com.yourcompany.app.service;

import com.yourcompany.app.config.AppConfiguration;
import lombok.extern.slf4j.Slf4j;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

@ApplicationScoped
@Slf4j
public class ApiService {

    @Inject
    AppConfiguration appConfiguration;

    public void uploadPayload(String payload, String apiEndpoint) {
        String authToken = ""; // Fetch the authentication token here
        
        // Create the REST client
        Client client = ClientBuilder.newClient();

        try {
            // Send a POST request to the API endpoint
            Response response = client.target(apiEndpoint)
                    .request(MediaType.APPLICATION_JSON)
                    .header("Authorization", "Bearer " + authToken)
                    .post(Entity.json(payload));

            // Check if the request was successful
            if (response.getStatus() == Response.Status.OK.getStatusCode()) {
                log.info("Payload uploaded successfully");
            } else {
                log.error("Failed to upload payload: {}", response.getStatusInfo().getReasonPhrase());
            }
        } catch (Exception e) {
            log.error("Error occurred while uploading payload", e);
        } finally {
            // Close the REST client
            client.close();
        }
    }
}
}
}

CustomExceptionMapper.java:

package com.yourcompany.app.exception;

import javax.ws.rs.core.Response;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;

@Provider
public class CustomExceptionMapper implements ExceptionMapper<Exception> {

    @Override
    public Response toResponse(Exception exception) {
        // Handle the exception and return the appropriate response
        String errorMessage = "An error occurred";
        
        if (exception instanceof SomeSpecificException) {
            // Handle a specific exception
            errorMessage = "A specific error occurred";
        }
        
        return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
                .entity(errorMessage)
                .build();
    }
}


ArchiveExtractor.java:

package com.yourcompany.util;

import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.apache.commons.compress.utils.IOUtils;

import javax.enterprise.context.ApplicationScoped;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

@ApplicationScoped
public class ArchiveExtractor {

    public void extractArchive(String filePath) {
        String fileExtension = getFileExtension(filePath);

        if ("zip".equalsIgnoreCase(fileExtension)) {
            extractZipArchive(filePath);
        } else if ("tar.gz".equalsIgnoreCase(fileExtension)) {
            extractTarGzArchive(filePath);
        } else {
            // Unsupported archive format
            throw new IllegalArgumentException("Unsupported archive format: " + fileExtension);
        }
    }

    private String getFileExtension(String filePath) {
        return filePath.substring(filePath.lastIndexOf(".") + 1);
    }

    private void extractZipArchive(String filePath) {
        try (ZipInputStream zipInputStream = new ZipInputStream(Files.newInputStream(Path.of(filePath)))) {
            ZipEntry entry;
            while ((entry = zipInputStream.getNextEntry()) != null) {
                if (!entry.isDirectory()) {
                    String extractedFileName = entry.getName();
                    File extractedFile = new File(extractedFileName);
                    Files.copy(zipInputStream, extractedFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                }
                zipInputStream.closeEntry();
            }
        } catch (IOException e) {
            // Handle the exception accordingly
            e.printStackTrace();
        }
    }

    private void extractTarGzArchive(String filePath) {
        try (InputStream fileInputStream = Files.newInputStream(Path.of(filePath));
             BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream);
             GzipCompressorInputStream gzipInputStream = new GzipCompressorInputStream(bufferedInputStream);
             TarArchiveInputStream tarInputStream = new TarArchiveInputStream(gzipInputStream)) {

            TarArchiveEntry entry;
            while ((entry = tarInputStream.getNextTarEntry()) != null) {
                if (!entry.isDirectory()) {
                    String extractedFileName = entry.getName();
                    File extractedFile = new File(extractedFileName);
                    FileOutputStream outputStream = new FileOutputStream(extractedFile);
                    IOUtils.copy(tarInputStream, outputStream);
                    outputStream.close();
                }
            }
        } catch (IOException e) {
            // Handle the exception accordingly
            e.printStackTrace();
        }
    }
}

Logger.java

package com.yourcompany.app.logger;

import org.slf4j.LoggerFactory;

public class Logger {

    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(Logger.class);

    public static void logMessage(String message, String level, String verbosity, String module) {
        String formattedMessage = String.format("{ timestamp: %s, LEVEL: %s, VERBOSITY: %s, MODULE: %s, %s }",
                java.time.LocalDateTime.now(), level, verbosity, module, message);

        switch (level.toUpperCase()) {
            case "DEBUG":
                if (verbosity.equalsIgnoreCase("HIGH")) {
                    LOG.debug(formattedMessage);
                }
                break;
            case "INFO":
                if (verbosity.equalsIgnoreCase("HIGH") || verbosity.equalsIgnoreCase("MEDIUM")) {
                    LOG.info(formattedMessage);
                }
                break;
            case "WARN":
                if (verbosity.equalsIgnoreCase("HIGH") || verbosity.equalsIgnoreCase("MEDIUM")) {
                    LOG.warn(formattedMessage);
                }
                break;
            case "ERROR":
                if (verbosity.equalsIgnoreCase("HIGH") || verbosity.equalsIgnoreCase("MEDIUM")) {
                    LOG.error(formattedMessage);
                }
                break;
            default:
                LOG.info(formattedMessage);
                break;
        }
    }
}



-------------gradle

plugins {
    id 'java'
    id 'io.quarkus'
    id 'org.owasp.dependencycheck' version '6.4.0'
}

group 'com.yourcompany'
version '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.quarkus:quarkus-resteasy-jsonb:2.3.0.Final'
    implementation 'io.quarkus:quarkus-junit5:2.3.0.Final'
    implementation 'io.quarkus:quarkus-arc:2.3.0.Final'
    implementation 'io.quarkus:quarkus-smallrye-jwt:2.3.0.Final'

    implementation 'org.slf4j:slf4j-api:1.7.32' // SLF4J API
    implementation 'org.slf4j:slf4j-simple:1.7.32' // SLF4J Simple implementation

    // Add other dependencies as needed
}

dependencyCheck {
    format = "HTML"
}

test {
    useJUnitPlatform()
}


--------settings.gradle
rootProject.name = 'your-app-name'

