import unittest
from unittest.mock import MagicMock

from artifact_downloader import ArtifactDownloader
from api_uploader import ApiUploader, CertApiUploader, NonCertApiUploader


class TestArtifactDownloader(unittest.TestCase):

    def test_download_files(self):
        # Create a mock logger
        logger_mock = MagicMock()

        # Create an instance of ArtifactDownloader
        downloader = ArtifactDownloader(logger_mock)

        # Mock the requests.get() method to return a successful response
        mock_response = MagicMock()
        mock_response.status_code = 200
        requests_mock = MagicMock()
        requests_mock.get.return_value = mock_response

        # Patch the requests module with the mock object
        with unittest.mock.patch('artifact_downloader.requests', requests_mock):
            # Call the download_files() method
            downloader.download_files('output_dir')

        # Assert that the logger was called with the expected log message
        logger_mock.info.assert_called_with('Downloading files from Artifactory folder: ...')

    # Add more test cases for other methods as needed


class TestApiUploader(unittest.TestCase):

    def test_cert_api_uploader_upload_file(self):
        # Create a mock logger
        logger_mock = MagicMock()

        # Create an instance of CertApiUploader
        uploader = CertApiUploader(logger_mock, 'username', 'password')

        # Call the upload_file() method
        uploader.upload_file()

        # Assert that the logger was called with the expected log message
        logger_mock.info.assert_called_with('Uploading file to API with certificate authentication...')
    
    def test_non_cert_api_uploader_upload_file(self):
        # Create a mock logger
        logger_mock = MagicMock()

        # Create an instance of NonCertApiUploader
        uploader = NonCertApiUploader(logger_mock, 'username', 'password')

        # Call the upload_file() method
        uploader.upload_file()

        # Assert that the logger was called with the expected log message
        logger_mock.info.assert_called_with('Uploading file to API without certificate authentication...')


if __name__ == '__main__':
    unittest.main()
