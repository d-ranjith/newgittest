import os
import requests

class OAuthValidator:
    def __init__(self, credentials_file, client_id_constant, client_secret_constant, token_endpoint, api_service):
        self.credentials_file = credentials_file
        self.client_id_constant = client_id_constant
        self.client_secret_constant = client_secret_constant
        self.token_endpoint = token_endpoint
        self.api_service = api_service

    def get_jwt_token(self):
        try:
            # Read client_id and secret from the credentials file
            with open(self.credentials_file, 'r') as file:
                lines = file.readlines()
                client_id = None
                client_secret = None
                for line in lines:
                    if line.startswith(f"{self.client_id_constant}="):
                        client_id = line.split('=')[1].strip()
                    elif line.startswith(f"{self.client_secret_constant}="):
                        client_secret = line.split('=')[1].strip()

            if client_id is None or client_secret is None:
                print("Error: Invalid format in credentials file.")
                return None

            # Connect to the token endpoint to retrieve the JWT token
            response = requests.post(self.token_endpoint, data={'client_id': client_id, 'secret': client_secret})
            response.raise_for_status()  # Raise an exception if the request was not successful

            # Extract and return the JWT token
            token = response.json().get('token')
            return token

        except FileNotFoundError:
            print("Error: Credentials file not found.")
            return None
        except requests.exceptions.RequestException as e:
            print(f"Error connecting to token endpoint: {e}")
            return None
        except KeyError:
            print("Error: Invalid response from token endpoint.")
            return None
        except Exception as e:
            print(f"Error: {e}")
            return None

    def validate_token(self, token):
        try:
            # Connect to the API service to validate the token
            headers = {'Authorization': f'Bearer {token}'}
            response = requests.get(self.api_service, headers=headers)
            response.raise_for_status()  # Raise an exception if the request was not successful

            # Process the response if needed
            # ...

        except requests.exceptions.RequestException as e:
            print(f"Error connecting to API service: {e}")
        except Exception as e:
            print(f"Error: {e}")


# Example usage
credentials_file = '/path/to/credentials.txt'  # Replace with the actual path to your credentials file
client_id_constant = 'CLIENT_ID'  # Replace with the constant name for the client ID in the credentials file
client_secret_constant = 'CLIENT_SECRET'  # Replace with the constant name for the client secret in the credentials file
token_endpoint = 'https://api.example.com/token'  # Replace with the token endpoint URL
api_service = 'https://api.example.com/service'  # Replace with the API service URL

validator = OAuthValidator(credentials_file, client_id_constant, client_secret_constant, token_endpoint, api_service)
jwt_token = validator.get_jwt_token()
if jwt_token:
    validator.validate_token(jwt_token)
