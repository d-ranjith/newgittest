#!/bin/bash

# Script: process_namespaces.sh
#
# Description:
# This script processes namespaces in an OpenShift cluster to identify and manage configmaps. 
# It can list deltas between the existing configmaps and a specified list of required configmaps,
# and optionally delete the deltas and log the actions to an audit file.
#
# Usage:
# ./process_namespaces.sh [options]
#
# Options:
#   --cluster <cluster1,cluster2,...>  Specify clusters to process (optional)
#   --ns-list <namespace1,namespace2,...>  Specify namespaces to process (optional)
#   --ns-regex <regex>  Specify a regex pattern to filter namespaces (optional)
#   --skip-ns <regex>  Specify a regex pattern to skip namespaces (optional)
#   --ns-search-list <namespace1,namespace2,...>  Specify namespaces to search for stale configmaps (optional)
#   -d  Dry run: List deltas without deleting (optional)
#   -D  Delete deltas and log to audit file (optional)
#   -h  Display this help message (optional)
#
# Example usage:
# ./process_namespaces.sh --cluster cluster1 --ns-list namespace1,namespace2 --ns-search-list namespace3 -d
#
# Author: [Your Name]
# Date: [Date]
# Version: 1.0
#
# Notes:
# - This script requires the 'oc' command-line tool to be installed and configured.
# - Ensure that the necessary permissions are granted to the service account running this script.
#
# Disclaimer:
# This script is provided as-is, without any warranties or guarantees. Use it at your own risk.


dry_run=false
delete=false
audit_dir="/tmp"
audit_log="$audit_dir/audit.log"
processing_log="$audit_dir/processing.log"
batch_size=50  # Adjust batch size as needed
clusters=()
ns_list=()
skip_ns_regex=""
ns_search_list=()

start_time=$(date +"%Y-%m-%d %H:%M:%S")

usage() {
    echo "Usage: $0 [-d] [-D] [--cluster cluster1,cluster2,...] [--ns-list namespace1,namespace2,...] [--ns-regex regex] [--skip-ns regex] [--ns-search-list namespace1,namespace2,...]"
    echo "Options:"
    echo "  -d  Dry run: List deltas without deleting"
    echo "  -D  Delete deltas and log to audit file"
    echo "  --cluster cluster1,cluster2,... : Specify clusters to target (comma-separated)"
    echo "  --ns-list namespace1,namespace2,... : Specify namespaces to target (comma-separated)"
    echo "  --ns-regex regex : Specify regex pattern to filter namespaces"
    echo "  --skip-ns regex : Specify regex pattern to skip namespaces"
    echo "  --ns-search-list namespace1,namespace2,... : Specify list of namespaces to search for stale configmaps"
    exit 1
}

# Redirect stdout and stderr to processing log file
exec > >(tee -a $processing_log)
exec 2>&1

while [[ "$#" -gt 0 ]]; do
    case $1 in
        -d) dry_run=true ;;
        -D) dry_run=true; delete=true ;;
        --cluster) clusters=($(echo "$2" | tr ',' ' ')); shift ;;
        --ns-list) ns_list=($(echo "$2" | tr ',' ' ')); shift ;;
        --ns-regex) ns_regex="$2"; shift ;;
        --skip-ns) skip_ns_regex="$2"; shift ;;
        --ns-search-list) ns_search_list=($(echo "$2" | tr ',' ' ')); shift ;;
        *) usage ;;
    esac
    shift
done

# Ensure audit directory exists
mkdir -p $audit_dir

# Function to login to cluster
login_to_cluster() {
    local cluster=$1
    echo "Logging in to cluster: $cluster"
    oc login $cluster --insecure-skip-tls-verify
}

# Function to fetch namespaces
fetch_namespaces() {
    if [[ -n "$ns_regex" ]]; then
        namespaces=($(oc get namespaces --no-headers -o custom-columns=NAME --show-labels | grep -E "$ns_regex"))
    elif [[ ${#ns_list[@]} -gt 0 ]]; then
        namespaces=("${ns_list[@]}")
    else
        namespaces=($(oc get namespaces --no-headers -o custom-columns=NAME --show-labels))
    fi
    # Apply skip namespace regex
    if [[ -n "$skip_ns_regex" ]]; then
        namespaces=($(echo "${namespaces[@]}" | tr ' ' '\n' | grep -vE "$skip_ns_regex"))
    fi
}

# Function to process namespaces in a batch
process_batch() {
    local start_index=$1
    local end_index=$2
    for ((i = $start_index; i < $end_index; i++)); do
        namespace=${namespaces[$i]}
        process_namespace $namespace
    done
}

# Function to process a single namespace
process_namespace() {
    local namespace=$1
    echo "$(date +"%Y-%m-%d %H:%M:%S") - [INFO] Processing namespace: $namespace" | tee -a $processing_log
    # Check if the namespace is in the search list
    if [[ ${#ns_search_list[@]} -gt 0 && ! " ${ns_search_list[@]} " =~ " $namespace " ]]; then
        echo "$(date +"%Y-%m-%d %H:%M:%S") - [INFO] Skipping namespace: $namespace" | tee -a $processing_log
        return
    fi
    # Get all ConfigMaps in the namespace
    all_configmaps=$(oc get configmaps -n $namespace --no-headers | awk '{print $1}')
    # Find delta ConfigMaps
    for configmap in $all_configmaps; do
        found=false
        for required_configmap in "${required_configmaps[@]}"; do
            if [ "$configmap" == "$required_configmap" ]; then
                found=true
                break
            fi
        done
        if ! $found; then
            echo "$(date +"%Y-%m-%d %H:%M:%S") - [DELTA] Delta ConfigMap: $configmap" | tee -a $processing_log
            if $delete; then
                delete_configmap $namespace $configmap
            fi
        fi
    done
    if [ -z "$all_configmaps" ]; then
        echo "$(date +"%Y-%m-%d %H:%M:%S") - [INFO] No ConfigMaps found in namespace: $namespace" | tee -a $processing_log
    fi
}

# Function to delete ConfigMap and log to audit file
delete_configmap() {
    local namespace=$1
    local configmap=$2
    echo "$(date +"%Y-%m-%d %H:%M:%S") - [AUDIT] Deleting ConfigMap $configmap in namespace $namespace" | tee -a $audit_log
    if ! $dry_run; then
        oc delete configmap $configmap -n $namespace >> "$audit_dir/$namespace.log"
    fi
}

# Define required ConfigMaps
required_configmaps=(
    $(<configmap_list.txt)
)

# Login to each cluster
for cluster in "${clusters[@]}"; do
    login_to_cluster $cluster
    fetch_namespaces
    # Calculate number of namespaces
    num_namespaces=${#namespaces[@]}
    # Calculate number of batches
    num_batches=$((($num_namespaces + $batch_size - 1) / $batch_size))
    # Iterate over batches
    for ((i = 0; i < $num_batches; i++)); do
        start_index=$(($i * $batch_size))
        end_index=$((($i + 1) * $batch_size))
        if [ $end_index -gt $num_namespaces ]; then
            end_index=$num_namespaces
        fi
        process_batch $start_index $end_index &
    done
    # Wait for all background processes to finish
    wait
done

end_time=$(date +"%Y-%m-%d %H:%M:%S")
echo "[INFO] Processing complete." | tee -a $processing_log
echo "[INFO] Start time: $start_time" | tee -a $processing_log
echo "[INFO] End time: $end_time" | tee -a $processing_log

# Compute overall processing time
start_seconds=$(date -d "$start_time" +%s)
end_seconds=$(date -d "$end_time" +%s)
processing_time=$((end_seconds - start_seconds))
echo "[INFO] Overall processing time: $processing_time seconds" | tee -a $processing_log


#!/bin/bash

# Main script functionality...

# Self-tests
echo "Running self-tests..."

# Test basic functionality
./script.sh

# Test dry run mode
./script.sh -d

# Test delete mode
./script.sh -D

# Test skipping namespaces
./script.sh --skip-ns ".*-test-.*"

# Test specific namespaces
./script.sh --ns-list namespace1,namespace2

# Test namespace regex
./script.sh --ns-regex ".*-12345-.*"

# Test configmap list inline
./script.sh

# Test multiple clusters
./script.sh --cluster cluster1,cluster2

echo "Self-tests complete."

