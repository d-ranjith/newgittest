#!/bin/bash

# Fetch the new Jenkins Docker image and agent from OpenShift
oc login <OpenShift_URL> -u <username> -p $OPENSHIFT_PASSWORD
oc project <project_name>
oc import-image jenkins:latest --from=<openshift_repo>/jenkins:latest --confirm
oc import-image jenkins-agent-python:latest --from=<openshift_repo>/jenkins-agent-python:latest --confirm
oc import-image jenkins-agent-java:latest --from=<openshift_repo>/jenkins-agent-java:latest --confirm

# Start a Jenkins pod using the new image
oc new-app jenkins:latest

# Validate that the Jenkins pod is running
if oc get pod | grep -q "jenkins.*Running"; then
    echo "Jenkins is running"
else
    echo "Error: Jenkins is not running"
    exit 1
fi

# Run a Python build using the new agent
oc new-build --name=python-build --image-stream=python:latest --binary
oc start-build python-build --from-dir=. --follow

# Run a Java build using the new agent
oc new-build --name=java-build --image-stream=java:latest --binary
oc start-build java-build --from-dir=. --follow

export OPENSHIFT_PASSWORD=your_password


import os

def compare_files(dir1, dir2):
    differences = {}
    for filename in os.listdir(dir1):
        file1_path = os.path.join(dir1, filename)
        file2_path = os.path.join(dir2, filename)
        if os.path.isfile(file1_path) and os.path.isfile(file2_path):
            with open(file1_path) as file1, open(file2_path) as file2:
                lines1 = file1.readlines()
                lines2 = file2.readlines()
                if lines1 != lines2:
                    differences[filename] = [line for line in lines1 if line not in lines2]
    return differences

dir1 = "/path/to/dir1"
dir2 = "/path/to/dir2"
differences = compare_files(dir1, dir2)
print(differences)
-----


harness-charts/
├── environments/
│   ├── values.yaml
│   ├── prod.yaml
│   ├── stage.yaml
│   └── test.yaml
├── services/
│   ├── values.yaml
│   ├── db/
│   │   ├── Chart.yaml
│   │   ├── values.yaml
│   │   └── templates/
│   │       ├── deployment.yaml
│   │       ├── service.yaml
│   │       └── ...
│   ├── snowflake/
│   │   ├── Chart.yaml
│   │   ├── values.yaml
│   │   └── templates/
│   │       ├── deployment.yaml
│   │       ├── service.yaml
│   │       └── ...
│   ├── batch/
│   │   ├── Chart.yaml
│   │   ├── values.yaml
│   │   └── templates/
│   │       ├── job.yaml
│   │       ├── ...
│   └── ansible/
│       ├── Chart.yaml
│       ├── values.yaml
│       └── templates/
│           ├── deployment.yaml
│           ├── ...
├── workflows/
│   ├── values.yaml
│   ├── my_workflow/
│   │   ├── Chart.yaml
│   │   ├── values.yaml
│   │   └── templates/
│   │       ├── steps.yaml
│   │       ├── ...
│   ├── another_workflow/
│   │   ├── Chart.yaml
│   │   ├── values.yaml
│   │   └── templates/
│   │       ├── steps.yaml
│   │       ├── ...
│   └── ...
├── pipelines/
│   ├── values.yaml
│   ├── my_pipeline/
│   │   ├── Chart.yaml
│   │   ├── values.yaml
│   │   └── templates/
│   │       ├── stages.yaml
│   │       ├── ...
│   ├── another_pipeline/
│   │   ├── Chart.yaml
│   │   ├── values.yaml
│   │   └── templates/
│   │       ├── stages.yaml
│   │       ├── ...
│   └── ...
└── ...

harness-charts/
├── charts/
│   ├── snowflake/
│   │   ├── Chart.yaml
│   │   ├── templates/
│   │   │   ├── service.yaml
│   │   │   ├── workflow.yaml
│   │   │   ├── pipeline.yaml
│   │   ├── values.yaml
│   ├── database/
│   │   ├── Chart.yaml
│   │   ├── templates/
│   │   │   ├── service.yaml
│   │   │   ├── workflow.yaml
│   │   │   ├── pipeline.yaml
│   │   ├── values.yaml
├── environments/
│   ├── values.yaml
│   ├── dev.yaml
│   ├── test.yaml
│   ├── prod.yaml
├── values.yaml


The charts folder contains subfolders for each deployment type: snowflake and database. Each of these subfolders has a Chart.yaml file to define the chart metadata, a values.yaml file to define the default values for that deployment type, and a templates folder that contains the Kubernetes manifests for the services, workflows, and pipelines.

The environments folder contains YAML files for each environment, including a values.yaml file that defines the default values for all environments. The adopting user can override these default values by creating a separate YAML file for each environment (e.g., dev.yaml, test.yaml, prod.yaml) and specifying the overrides there.

Here's an example of what the snowflake/values.yaml file might look like for a contributor managing the Snowflake deployment type:

And here's an example of what the database/values.yaml file might look like for a contributor managing the database deployment type:
database:
  driver: "oracle.jdbc.driver.OracleDriver"
  url: "jdbc:oracle:thin:@//mydatabase.host.com:1521/ORCLCDB"
  username: "myuser"
  password: "mypassword"






# Override values for the DB service
helm upgrade --install db-service harness-charts/services/db -f my-db-values.yaml

# Override values for the "my_workflow" workflow
helm upgrade --install my-workflow harness-charts/workflows/my_workflow -f my-workflow-values.yaml

# Override values for the "my_pipeline" pipeline
helm upgrade --install my-pipeline harness-charts/pipelines/my_pipeline -f my-pipeline-values.yaml



charts/oracle/Chart.yaml

apiVersion: v2
name: oracle
description: Helm chart for deploying Oracle
version: 0.1.0

charts/oracle/values.yaml

database:
  driver: "oracle.jdbc.driver.OracleDriver"
  url: "jdbc:oracle:thin:@//mydatabase.host.com:1521/ORCLCDB"
  username: "myuser"
  password: "mypassword"

charts/oracle/templates/service.yaml

apiVersion: v1
kind: Service
metadata:
  name: oracle
spec:
  ports:
    - name: oracle
      port: 1521
  selector:
    app: oracle

charts/oracle/templates/workflow.yaml

apiVersion: harness.io/v1
kind: Workflow
metadata:
  name: oracle-workflow
  annotations:
    description: Workflow for deploying Oracle
spec:
  applicationId: {{ .Values.applicationId }}
  pipelineStages:
  - type: DEPLOY
    name: deploy-oracle
    deployStage:
      accountName: {{ .Values.accountName }}
      strategy: ROLLING
      overrideValuesYaml: |
        image:
          repository: my-artifactory-instance.com/my-organization/oracle-chart
          tag: {{ .Values.chartVersion }}
      clusters:
      - clusterName: {{ .Values.clusterName }}
  triggers:
  - type: MANUAL



charts/oracle/templates/pipeline.yaml

apiVersion: harness.io/v1
kind: Pipeline
metadata:
  name: oracle-pipeline
  annotations:
    description: Pipeline for deploying Oracle using Kubernetes and Helm
spec:
  applicationId: {{ .Values.applicationId }}
  pipelineStages:
  - type: DEPLOY
    name: deploy-oracle
    deployStage:
      accountName: {{ .Values.accountName }}
      strategy: ROLLING
      overrideValuesYaml: |
        image:
          repository: my-artifactory-instance.com/my-organization/oracle-chart
          tag: {{ .Values.chartVersion }}
      clusters:
      - clusterName: {{ .Values.clusterName }}
  - type: DEPLOY
    name: deploy-oracle-service
    deployStage:
      accountName: {{ .Values.accountName }}
      strategy: ROLLING
      overrides: |
        {
          "service": {
            "values": {
              "image": {
                "repository": "my-artifactory-instance.com/my-organization/oracle-service-chart",
                "tag": "{{ .Values.serviceChartVersion }}"
              }
            }
          }
        }
      clusters:
      - clusterName: {{ .Values.clusterName }}
  triggers:
  - type: MANUAL
