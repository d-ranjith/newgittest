class Platform {
  constructor() {
    if (new.target === Platform) {
      throw new TypeError("Cannot construct Platform instances directly");
    }
    this.createService = () => {
      throw new Error("createService method must be implemented");
    };
    this.createWorkflow = () => {
      throw new Error("createWorkflow method must be implemented");
    };
    this.createPipeline = () => {
      throw new Error("createPipeline method must be implemented");
    };
  }
}

class Ansible extends Platform {
  createService(service) {
    console.log(`Creating service on Ansible: ${service}`);
  }
  createWorkflow(workflow) {
    console.log(`Creating workflow on Ansible: ${workflow}`);
  }
  createPipeline(pipeline) {
    console.log(`Creating pipeline on Ansible: ${pipeline}`);
  }
}

class PlatformFactory {
  static getPlatform(name) {
    switch (name) {
      case "Ansible":
        return new Ansible();
      default:
        throw new Error("Invalid platform name");
    }
  }
}

// Usage
const ansible = PlatformFactory.getPlatform("Ansible");
ansible.createService("User Authentication"); // Output: "Creating service on Ansible: User Authentication"
ansible.createWorkflow("Data Analysis"); // Output: "Creating workflow on Ans
