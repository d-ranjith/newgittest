package com.yourcompany.app.logger;

import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDateTime;

public class Logger {

    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(Logger.class);

    private static final String LOG_FILE_PATH = "app.log";
    private static final String MARKER = "----- BEGIN LOG MESSAGES -----\n";

    public static void logMessage(String message, String level, String verbosity, String module) {
        String formattedMessage = String.format("{ timestamp: %s, LEVEL: %s, VERBOSITY: %s, MODULE: %s, %s }",
                java.time.LocalDateTime.now(), level, verbosity, module, message);

        switch (level.toUpperCase()) {
            case "DEBUG":
                if (verbosity.equalsIgnoreCase("HIGH")) {
                    LOG.debug(formattedMessage);
                }
                break;
            case "INFO":
                if (verbosity.equalsIgnoreCase("HIGH") || verbosity.equalsIgnoreCase("MEDIUM")) {
                    LOG.info(formattedMessage);
                }
                break;
            case "WARN":
                if (verbosity.equalsIgnoreCase("HIGH") || verbosity.equalsIgnoreCase("MEDIUM")) {
                    LOG.warn(formattedMessage);
                }
                break;
            case "ERROR":
                if (verbosity.equalsIgnoreCase("HIGH") || verbosity.equalsIgnoreCase("MEDIUM")) {
                    LOG.error(formattedMessage);
                }
                break;
            default:
                LOG.info(formattedMessage);
                break;
        }

        // Store the log message in the file
        try (PrintWriter writer = new PrintWriter(new FileWriter(LOG_FILE_PATH, true))) {
            writer.println(formattedMessage);
            writer.flush();
        } catch (IOException e) {
            // Handle IOException if needed
        }
    }

    public static void printLogsAfterMarker() {
        // Print all the log messages after the marker
        try (PrintWriter writer = new PrintWriter(new FileWriter(LOG_FILE_PATH, true))) {
            writer.println(MARKER);
            writer.flush();
        } catch (IOException e) {
            // Handle IOException if needed
        }
    }

    public static void clearLogFile() {
        // Clear the log file
        File file = new File(LOG_FILE_PATH);
        if (file.exists()) {
            file.delete();
        }
    }
}

To achieve the desired behavior, you can follow these steps:

At the beginning of the application or when the log file is initialized, call clearLogFile() to ensure the log file is empty and ready for new log messages.

Throughout the program, use logMessage() method to log messages. The log messages will be both printed to the console (based on log level and verbosity) and appended to the log file.

At the end of the program's execution, call printLogsAfterMarker() to print the marker (if log messages were logged) and all the log messages after the marker. This method will ensure that the marker is only present once at the beginning of the log file.

Here's the sequence of method calls:

Call clearLogFile() at the start of the application (or when the log file is initialized).
Throughout the program, use logMessage() method to log messages.
At the end of the program's execution, call printLogsAfterMarker() to print the marker and all log messages after the marker.



In the above implementation, the logMessage method is responsible for logging messages with different levels and verbosity. The behavior of verbosity and debug level in the implementation is as follows:

Verbosity: The verbosity parameter controls which log messages get printed based on their verbosity level. The valid verbosity levels are "HIGH", "MEDIUM", and "LOW".

If verbosity is set to "HIGH", all log messages with "DEBUG", "INFO", "WARN", and "ERROR" levels will be printed.
If verbosity is set to "MEDIUM", log messages with "INFO", "WARN", and "ERROR" levels will be printed.
If verbosity is set to "LOW", only log messages with "WARN" and "ERROR" levels will be printed.
Debug Level: The level parameter controls the log level of the message. The valid log levels are "DEBUG", "INFO", "WARN", and "ERROR".

If level is set to "DEBUG" and verbosity is set to "HIGH", the message will be logged.
If level is set to "INFO" and verbosity is set to "HIGH" or "MEDIUM", the message will be logged.
If level is set to "WARN" and verbosity is set to "HIGH" or "MEDIUM", the message will be logged.
If level is set to "ERROR" and verbosity is set to "HIGH" or "MEDIUM", the message will be logged.
In summary, verbosity controls which log messages get printed based on their verbosity level, while debug level controls the actual log level of the message. This allows you to fine-tune the logging behavior by specifying both the verbosity and log level parameters when calling the logMessage method.
