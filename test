/**
 * The App class represents the main entry point of the application. It initializes and runs the application based on the
 * configuration settings obtained from MicroProfile Config.
 * <p>
 * The application uses dependency injection to acquire instances of various services, such as ArtifactoryService,
 * OAuthService, and ApiService.
 */
public class App {

    private static final Logger logger = Logger.getLogger(App.class);

    @Inject
    ArtifactoryService artifactoryService;

    @Inject
    OAuthService oauthService;

    @Inject
    ApiService apiService;

    /**
     * The main method of the application. It creates an instance of the App class, initializes the application,
     * and runs the application.
     *
     * @param args Command-line arguments (not used in this application).
     */
    public static void main(String[] args) {
        App app = new App();
        app.initialize();
        app.run();
    }

    /**
     * Performs any necessary initialization for the application. This method can be extended in subclasses
     * to provide custom initialization logic.
     */
    private void initialize() {
        // Perform any necessary initialization here
    }

    /**
     * Runs the main logic of the application based on the configuration settings obtained from MicroProfile Config.
     * If upload is enabled, it fetches an OAuth token using the OAuthService and uploads a payload using the ApiService.
     * If extraction is enabled, it downloads a file from Artifactory using the ArtifactoryService, gets the file size,
     * and extracts and shows its contents using the ArtifactoryService and ArchiveExtractor utility.
     */
    private void run() {
        Config config = ConfigProvider.getConfig();

        boolean uploadEnabled = config.getValue("upload.enabled", Boolean.class);
        boolean extractEnabled = config.getValue("extract.enabled", Boolean.class);

        if (uploadEnabled) {
            // Fetch OAuth token using oauthService
            // ...

            // Upload payload using apiService
            // ...
        }

        if (extractEnabled) {
            // Download file from Artifactory using artifactoryService
            // ...

            // Get file size using artifactoryService
            // ...

            // Extract and show contents using artifactoryService and ArchiveExtractor utility
            // ...
        }
    }
}


/**
 * The Logger class provides logging capabilities for the application. It allows logging messages at different levels
 * (DEBUG, INFO, WARN, and ERROR) with specified verbosity and module information. The logged messages can be printed
 * to the configured logging framework (SLF4J) and saved to a log file "app.log".
 */
public class Logger {

    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(Logger.class);

    private static final String LOG_FILE_PATH = "app.log";
    private static final String MARKER = "----- BEGIN LOG MESSAGES -----\n";

    /**
     * Logs a message with the specified level, verbosity, and module information.
     *
     * @param message   The log message to be logged.
     * @param level     The log level (DEBUG, INFO, WARN, ERROR).
     * @param verbosity The verbosity level of the log message (HIGH, MEDIUM, LOW).
     * @param module    The module or component associated with the log message.
     */
    public static void logMessage(String message, String level, String verbosity, String module) {
        String formattedMessage = String.format("{ timestamp: %s, LEVEL: %s, VERBOSITY: %s, MODULE: %s, %s }",
                java.time.LocalDateTime.now(), level, verbosity, module, message);

        switch (level.toUpperCase()) {
            case "DEBUG":
                if (verbosity.equalsIgnoreCase("HIGH")) {
                    LOG.debug(formattedMessage);
                }
                break;
            case "INFO":
                if (verbosity.equalsIgnoreCase("HIGH") || verbosity.equalsIgnoreCase("MEDIUM")) {
                    LOG.info(formattedMessage);
                }
                break;
            case "WARN":
                if (verbosity.equalsIgnoreCase("HIGH") || verbosity.equalsIgnoreCase("MEDIUM")) {
                    LOG.warn(formattedMessage);
                }
                break;
            case "ERROR":
                if (verbosity.equalsIgnoreCase("HIGH") || verbosity.equalsIgnoreCase("MEDIUM")) {
                    LOG.error(formattedMessage);
                }
                break;
            default:
                LOG.info(formattedMessage);
                break;
        }

        // Store the log message in the file
        try (PrintWriter writer = new PrintWriter(new FileWriter(LOG_FILE_PATH, true))) {
            writer.println(formattedMessage);
            writer.flush();
        } catch (IOException e) {
            // Handle IOException if needed
        }
    }

    /**
     * Prints all the log messages recorded after the marker "----- BEGIN LOG MESSAGES -----" to the log file.
     */
    public static void printLogsAfterMarker() {
        // Print all the log messages after the marker
        try (PrintWriter writer = new PrintWriter(new FileWriter(LOG_FILE_PATH, true))) {
            writer.println(MARKER);
            writer.flush();
        } catch (IOException e) {
            // Handle IOException if needed
        }
    }

    /**
     * Clears the log file "app.log" by deleting it if it exists.
     */
    public static void clearLogFile() {
        // Clear the log file
        File file = new File(LOG_FILE_PATH);
        if (file.exists()) {
            file.delete();
        }
    }
}


/**
 * The ArtifactoryService class provides methods for interacting with Artifactory, such as downloading files and
 * retrieving file size information.
 * <p>
 * This service is designed to be used as an application-scoped bean, allowing for efficient resource management
 * and reusability throughout the application.
 */
@ApplicationScoped
public class ArtifactoryService {

    /**
     * Downloads a file from Artifactory using the provided credentials.
     *
     * @param username        The username for authentication to Artifactory.
     * @param apiKey          The API key or password for authentication to Artifactory.
     * @param certificatePath The path to the SSL certificate file used for secure connections (optional).
     */
    public void downloadFileFromArtifactory(String username, String apiKey, String certificatePath) {
        // Implementation logic to download the file from Artifactory
        // ...
    }

    /**
     * Retrieves the size of a file located at the specified path.
     *
     * @param filePath The path to the file for which the size should be retrieved.
     * @return The size of the file in bytes.
     */
    public long getFileSize(String filePath) {
        // Implementation logic to get the file size
        // ...
        return 0;
    }
}/**
 * Retrieves the size of a file located at the specified file path.
 *
 * @param filePath The path to the file for which the size should be retrieved.
 * @return The size of the file in bytes, or 0 if an error occurs during the file size retrieval.
 */
public long getFileSize(String filePath) {
    try {
        Path path = Paths.get(filePath);
        return Files.size(path);
    } catch (IOException e) {
        log.error("Error occurred while getting file size: {}", e.getMessage());
    }
    return 0;
}




