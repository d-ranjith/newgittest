const readline = require('readline');
const fs = require('fs');
const path = require('path');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Prompt the user for the manifest type name
rl.question('Provide your custom manifest type name: ', (manifestTypeName) => {
  // Construct the path to the JSON file based on the manifest type name
  const filePath = path.join('config', `${manifestTypeName}.json`);

  try {
    let jsonData;

    // Check if the file exists
    if (fs.existsSync(filePath)) {
      // If the file exists, read and update it
      const data = fs.readFileSync(filePath, 'utf8');
      jsonData = JSON.parse(data);

      // Prompt the user for additional values
      rl.question('Provide the description for the manifest type: ', (description) => {
        rl.question('Provide the README.md URL to the Bitbucket repository: ', (documentation) => {
          rl.question('Provide tags (comma-separated): ', (tags) => {
            rl.question('Provide createdBy (user name or DL alias): ', (createdBy) => {
              rl.question('Provide the initial version: ', (latestVersion) => {
                // Close the readline interface
                rl.close();

                // Update the JSON data with user input
                jsonData.name = manifestTypeName;
                jsonData.latestVersion = latestVersion;
                jsonData.description = description;
                jsonData.documentation = documentation;
                jsonData.tags = tags.split(',').map((tag) => tag.trim());
                jsonData.versions[0].version = latestVersion;
                jsonData.versions[0].createdBy = createdBy;
                jsonData.versions[0].createdTime = new Date().toISOString();
                jsonData.versions[0].lastModifiedTime = new Date().toISOString();

                // Write the updated JSON data back to the file
                fs.writeFileSync(filePath, JSON.stringify(jsonData, null, 2));

                console.log('File updated successfully.');
                console.log('File location:', filePath);
              });
            });
          });
        });
      });
    } else {
      // If the file does not exist, create a new one with prompts
      rl.question('Provide the description for the manifest type: ', (description) => {
        rl.question('Provide the README.md URL to the Bitbucket repository: ', (documentation) => {
          rl.question('Provide tags (comma-separated): ', (tags) => {
            rl.question('Provide createdBy (user name or DL alias): ', (createdBy) => {
              rl.question('Provide the initial version: ', (latestVersion) => {
                // Close the readline interface
                rl.close();

                // Create a new JSON object with user input
                jsonData = {
                  name: manifestTypeName,
                  latestVersion: latestVersion,
                  description: description,
                  documentation: documentation,
                  tags: tags.split(',').map((tag) => tag.trim()),
                  enabled: true,
                  versions: [
                    {
                      version: latestVersion,
                      createdBy: createdBy,
                      createdTime: new Date().toISOString(),
                      lastModifiedTime: new Date().toISOString(),
                      branchName: 'master',
                      enabled: true
                    }
                  ]
                };

                // Write the new JSON data to a new file
                fs.writeFileSync(filePath, JSON.stringify(jsonData, null, 2));

                console.log('New file created successfully.');
                console.log('File location:', filePath);
              });
            });
          });
        });
      });
    }
  } catch (error) {
    console.error('Error:', error.message);
  }
});
