import os
import subprocess
import argparse

def get_all_namespaces():
    namespaces = []

    # Run 'oc get projects' command to list all projects (namespaces) in OpenShift
    result = subprocess.run(["oc", "get", "projects", "-o", "json"], capture_output=True, text=True)
    if result.returncode == 0:
        projects_data = result.stdout
        for item in projects_data['items']:
            namespaces.append(item['metadata']['name'])
    else:
        print("Error listing projects.")

    return namespaces

def get_configmaps_in_namespace(namespace):
    configmaps = []

    # Run 'oc get configmaps -n <namespace>' command to list configmaps in the specified namespace
    result = subprocess.run(["oc", "get", "configmaps", "-n", namespace, "-o", "json"], capture_output=True, text=True)
    if result.returncode == 0:
        configmaps_data = result.stdout
        for item in configmaps_data['items']:
            configmaps.append(item['metadata']['name'])
    else:
        print(f"Error listing ConfigMaps in namespace {namespace}.")

    return configmaps

# Implement other functions for finding residual configmaps and performing actions

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Find and delete residual ConfigMaps not used in Tekton Pipelines/Tasks in a specific cluster")
    parser.add_argument("input_file", help="Path to the file containing Tekton Pipeline ConfigMaps")
    parser.add_argument("--dry-run", action="store_true", help="Perform a dry run to list the residual ConfigMaps")
    parser.add_argument("--delete", action="store_true", help="Delete the residual ConfigMaps")
    parser.add_argument("--output-file", help="Path to the output file to record deleted ConfigMaps")
    args = parser.parse_args()

    with open(args.input_file, "r") as file:
        configmaps_used = [line.strip() for line in file]

    all_namespaces = get_all_namespaces()

    for namespace in all_namespaces:
        configmaps_in_namespace = get_configmaps_in_namespace(namespace)
        # Add logic to find residual configmaps and perform actions based on the provided arguments
